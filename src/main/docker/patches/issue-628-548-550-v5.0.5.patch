Index: src/main/java/edu/illinois/library/cantaloupe/image/exif/Reader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/illinois/library/cantaloupe/image/exif/Reader.java b/src/main/java/edu/illinois/library/cantaloupe/image/exif/Reader.java
--- a/src/main/java/edu/illinois/library/cantaloupe/image/exif/Reader.java	(revision 3f856f4beec36c698a585cd870379b788d13585a)
+++ b/src/main/java/edu/illinois/library/cantaloupe/image/exif/Reader.java	(date 1682027225329)
@@ -157,6 +157,10 @@
         byte[] data = new byte[length];
         int n, offset = 0;
         while ((n = inputStream.read(data, offset, data.length - offset)) < offset) {
+            if (n == -1) {
+                LOGGER.trace("readBytes(): No more data to read");
+                break;
+            }
             offset += n;
         }
         return data;
Index: src/main/java/edu/illinois/library/cantaloupe/image/Metadata.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/illinois/library/cantaloupe/image/Metadata.java b/src/main/java/edu/illinois/library/cantaloupe/image/Metadata.java
--- a/src/main/java/edu/illinois/library/cantaloupe/image/Metadata.java	(revision 3f856f4beec36c698a585cd870379b788d13585a)
+++ b/src/main/java/edu/illinois/library/cantaloupe/image/Metadata.java	(date 1682027646941)
@@ -5,7 +5,9 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import edu.illinois.library.cantaloupe.Application;
+import edu.illinois.library.cantaloupe.image.exif.DataType;
 import edu.illinois.library.cantaloupe.image.exif.Directory;
+import edu.illinois.library.cantaloupe.image.exif.Field;
 import edu.illinois.library.cantaloupe.image.exif.Tag;
 import edu.illinois.library.cantaloupe.image.iptc.DataSet;
 import edu.illinois.library.cantaloupe.util.StringUtils;
@@ -152,9 +154,14 @@
     }

     private void readOrientationFromEXIF() {
+        Field field = exif.getField(Tag.ORIENTATION);
         Object value = exif.getValue(Tag.ORIENTATION);
-        if (value != null) {
-            orientation = Orientation.forEXIFOrientation((int) value);
+        if (field != null && value != null) {
+            if (field.getDataType() == DataType.LONG) {
+                orientation = Orientation.forEXIFOrientation(Math.toIntExact((long) value));
+            } else {
+                orientation = Orientation.forEXIFOrientation(Integer.parseInt(value.toString()));
+            }
         }
     }

Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 3f856f4beec36c698a585cd870379b788d13585a)
+++ b/pom.xml	(date 1682027225340)
@@ -18,7 +18,7 @@
         <aws-sdk.version>2.15.28</aws-sdk.version>
         <jackson.version>2.11.0</jackson.version>
         <jetty.version>9.4.34.v20201102</jetty.version>
-        <jruby.version>9.2.17.0</jruby.version>
+        <jruby.version>9.3.5.0</jruby.version>
         <logback.version>1.2.8</logback.version>
         <surefire.version>3.0.0-M5</surefire.version>
     </properties>
Index: src/main/java/edu/illinois/library/cantaloupe/image/exif/Directory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/illinois/library/cantaloupe/image/exif/Directory.java b/src/main/java/edu/illinois/library/cantaloupe/image/exif/Directory.java
--- a/src/main/java/edu/illinois/library/cantaloupe/image/exif/Directory.java	(revision 3f856f4beec36c698a585cd870379b788d13585a)
+++ b/src/main/java/edu/illinois/library/cantaloupe/image/exif/Directory.java	(date 1682027531696)
@@ -157,6 +157,14 @@
         return Collections.unmodifiableMap(fields);
     }

+    public Field getField(Tag tag) {
+        return fields.keySet()
+                .stream()
+                .filter(f -> f.getTag().equals(tag))
+                .findFirst()
+                .orElse(null);
+    }
+
     public TagSet getTagSet() {
         return tagSet;
     }
